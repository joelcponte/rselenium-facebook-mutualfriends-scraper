mutual_friends = mutual_friends[1]
#check if friend has deleted page
deleted_text = tryCatch({html_nodes(current_page, ".uiHeaderTitle") %>% tail(1) %>% html_text()}, error = function(e) {'page not deleted!'})
if ( deleted_text == "Sorry, this content isn't available right now") next
if ( is.na(mutual_friends) ) next
# scroll down to load all friends
while (n_friends_now < mutual_friends) {
webElem <- remDr$findElement("css", "body")
webElem$sendKeysToElement(list(key = "end"))
n_friends_now = html_nodes(current_page, ".fsl.fwb.fcb") %>% html_text %>% length()
current_page = read_html(remDr$getPageSource()[[1]])
}
mutual_friends = html_nodes(current_page, ".fcb a")
mutual_friends = mutual_friends[1:n_friends_now]
mutual_friends_ids = sapply(mutual_friends, function(x) return(sub(".*id=([0-9]*).*", "\\1", x)))
mutual_friends_ids_all[[i]] <- mutual_friends_ids
}
i-514
i=514
#loops though all friends and collect your mutual friends with them
for (i in 514:n_friends) {
cat("Scrapping friend ", i, "out of ", n_friends, "...\n")
remDr$navigate(friends_df$link[i])
current_page = read_html(remDr$getPageSource()[[1]])
n_friends_now = html_nodes(current_page, ".fsl.fwb.fcb") %>% html_text %>% length()
mutual_friends = html_nodes(current_page, "[name='Mutual Friends'] ._3d0") %>% html_text %>% as.numeric
mutual_friends = mutual_friends[1]
#check if friend has deleted page
deleted_text = tryCatch({html_nodes(current_page, ".uiHeaderTitle") %>% tail(1) %>% html_text()}, error = function(e) {'page not deleted!'})
if ( deleted_text == "Sorry, this content isn't available right now") next
if ( is.na(mutual_friends) ) next
# scroll down to load all friends
while (n_friends_now < mutual_friends) {
webElem <- remDr$findElement("css", "body")
webElem$sendKeysToElement(list(key = "end"))
n_friends_now = html_nodes(current_page, ".fsl.fwb.fcb") %>% html_text %>% length()
current_page = read_html(remDr$getPageSource()[[1]])
}
mutual_friends = html_nodes(current_page, ".fcb a")
mutual_friends = mutual_friends[1:n_friends_now]
mutual_friends_ids = sapply(mutual_friends, function(x) return(sub(".*id=([0-9]*).*", "\\1", x)))
mutual_friends_ids_all[[i]] <- mutual_friends_ids
}
json_node
links
nodest
links
head(links)
links[links$source]
links[links$source == 1]
links[links$source == 1,]
head(friends_df)
head(friends_df, 10)
links$source
friends_df$name[links$source]
links$source = friends_df$name[links$source]
links$target = friends_df$name[links$target]
nodest
nodest$id = friends_df$name[nodest$id]
json_node = rjson::toJSON(unname(split(nodest, 1:nrow(nodest))))
json_link = rjson::toJSON(unname(split(links, 1:nrow(links))))
cat(json_link)
cat(json_link)
cat(json_link)
cat(json_node)
save.image("C:/Users/joelcponte/Desktop/Projetos/Estudos/Scrape Facebook/evr5.RData")
N = nrow(friends_df)
friends_matrix = matrix(0,N,N,dimnames = list(friends_df$friends_ids, friends_df$friends_ids))
for (i in 1:N) {
friends_matrix[i,friends_df$friends_ids %in% mutual_friends_ids_all[[i]]] = 1
}
i
colnames(friends_matrix) = friends_df$name
rownames(friends_matrix) = friends_df$name
ga.data <- do.call(rbind, lapply(1:N, function(i) {
do.call(rbind, lapply(1:N, function(j) {
if(friends_matrix[i,j]==1) return(data.frame(from=friends_df$name[i], to=friends_df$name[j]))
}))
}))
# Gary's code for social network analysis and clustering
g <- graph.data.frame(ga.data, directed=FALSE)
wc <- walktrap.community(g)
# build graph from adjacency matrix
g = graph.adjacency(friends_matrix,mode="undirected",weighted=NULL)
wc <- walktrap.community(g)
modularity(wc)
friends_links = apply(friends_matrix, 1, function(x) which(as.logical(x)))
links = data.frame(source = NULL, target = NULL)
for (i in 1:n_friends) {
if (length(friends_links[[i]]) > 0)
for (j in 1:length(friends_links[[i]]))
links = rbind(links, c(i, friends_links[[i]][j]))
}
names(links) = c("from", "to")
nodes = data.frame(name = NULL, group = NULL)
for (i in 1:length(wc)) {
nodes = rbind(nodes, data.frame(wc[[i]], rep(i, length(wc[[i]]))))
}
names(nodes) = c("name", "group")
friends_order = friends_df[,c("name"),drop=F]
friends_order$id = as.numeric(row.names(friends_order))
nodes = merge(nodes, friends_order, by = "name", all.y = T) %>% arrange(id)
nodes[is.na(nodes$group),]$group = length(wc)+1
nodes
nodes = data.frame(name = NULL, group = NULL)
for (i in 1:length(wc)) {
nodes = rbind(nodes, data.frame(wc[[i]], rep(i, length(wc[[i]]))))
}
names(nodes) = c("name", "group")
friends_order = friends_df[,c("name"),drop=F]
friends_order$id = as.numeric(row.names(friends_order))
nodes = merge(nodes, friends_order, by = "name", all.y = T) %>% arrange(id)
nodes[is.na(nodes$group),]$group = length(wc)+1
wc
nodes[is.na(nodes$group),]$group
length(wc)
nodes[is.na(nodes$group),]$group
nodes[is.na(nodes$group),]$group = length(wc)+1
nodes[is.na(nodes$group),]$group
head(nodes)
nodest = nodes[,c(2,3)]
links$value = 1
names(links) =
names(links)
names(links)
names(links) = c("source", "target", "value")
links$source = friends_df$name[links$source]
links$target = friends_df$name[links$target]
nodest$id = friends_df$name[nodest$id]
json_node = rjson::toJSON(unname(split(nodest, 1:nrow(nodest))))
json_link = rjson::toJSON(unname(split(links, 1:nrow(links))))
cat(json_node)
cat(json_link)
cat(json_link)
friends_df[friends_df$friends_usernames == "Antonia Toplosky",]
friends_df[friends_df$name == "Antonia Toplosky",]
lin
link
mutual_friends_ids_all[50]
mutual_friends_ids_all[49]
mutual_friends_ids_all[50]
load("C:/Users/joelcponte/Desktop/Projetos/Estudos/Scrape Facebook/evr5.RData")
ga.data
head(ga.data)
friends_links
nodes
nodest
head(nodest)
links
head(links)
g
N = nrow(friends_df)
friends_matrix = matrix(0,N,N,dimnames = list(friends_df$friends_ids, friends_df$friends_ids))
for (i in 1:N) {
friends_matrix[i,friends_df$friends_ids %in% mutual_friends_ids_all[[i]]] = 1
}
colnames(friends_matrix) = friends_df$name
rownames(friends_matrix) = friends_df$name
ga.data <- do.call(rbind, lapply(1:N, function(i) {
do.call(rbind, lapply(1:N, function(j) {
if(friends_matrix[i,j]==1) return(data.frame(from=friends_df$name[i], to=friends_df$name[j]))
}))
}))
# Gary's code for social network analysis and clustering
g <- graph.data.frame(ga.data, directed=FALSE)
N
wc <- walktrap.community(g)
modularity(wc)
library(igraph)
library(RCurl)
library(rjson)
library(tidyverse)
wc <- walktrap.community(g)
modularity(wc)
wc <- fastgreedy.community(g)
modularity(wc)
wc <- edge.betweenness.community(g)
modularity(wc)
wc <- spinglass.community(g)
modularity(wc)
wc <- leading.eigenvector.community(g)
modularity(wc)
wc <- label.propagation.community(g)
modularity(wc)
friends_links = apply(friends_matrix, 1, function(x) which(as.logical(x)))
links = data.frame(source = NULL, target = NULL)
for (i in 1:n_friends) {
if (length(friends_links[[i]]) > 0)
for (j in 1:length(friends_links[[i]]))
links = rbind(links, c(i, friends_links[[i]][j]))
}
names(links) = c("from", "to")
nodes = data.frame(name = NULL, group = NULL)
for (i in 1:length(wc)) {
nodes = rbind(nodes, data.frame(wc[[i]], rep(i, length(wc[[i]]))))
}
names(nodes) = c("name", "group")
friends_order = friends_df[,c("name"),drop=F]
friends_order$id = as.numeric(row.names(friends_order))
nodes = merge(nodes, friends_order, by = "name", all.y = T) %>% arrange(id)
nodes[is.na(nodes$group),]$group = length(wc)+1
names(links)
names(links) = c("source", "target")
links
ga.data
head(from)
head(ga.data)
friends_links
ga.data
links = ga.data
names(links)
names(links) = c("source", "target")
nodes
for (i in 1:length(wc)) {
nodes = rbind(nodes, data.frame(wc[[i]], rep(i, length(wc[[i]]))))
}
nodes = data.frame(name = NULL, group = NULL)
for (i in 1:length(wc)) {
nodes = rbind(nodes, data.frame(wc[[i]], rep(i, length(wc[[i]]))))
}
nodes
names(nodes) = c("name", "group")
names(nodes)
links
qtd_list_source = links %>% group_by(source) %>% summarise(count_s = n())
qtd_list_source
qtd_list_from = links %>% group_by(from) %>% summarise(count_f = n())
qtd_list_from
qtd_list_t = links %>% group_by(target) %>% summarise(count_t = n())
qtd_list_t
qtd_list_target = links %>% group_by(target) %>% summarise(count_t = n())
qtd_list = merge(qtd_list_source, qtd_list_target, by.x = "source", by.y = "target")
qtd_list
qtd_list_target = links %>% group_by(target) %>% summarise(count_t = n())
qtd_list = merge(qtd_list_source, qtd_list_target, by.x = "source", by.y = "target") %>%
mutate(links = count_s + count_t) %>%
select(-count_s, -count_t)
qtd_list
qtd_links_source = links %>% group_by(source) %>% summarise(count_s = n())
links
head(links)
head(nodes)
names(qtd_links)[1]
qtd_links = merge(qtd_links_source, qtd_links_target, by.x = "source", by.y = "target") %>%
mutate(links = count_s + count_t) %>%
select(-count_s, -count_t)
qtd_links_source = links %>% group_by(source) %>% summarise(count_s = n())
qtd_links_target = links %>% group_by(target) %>% summarise(count_t = n())
qtd_links = merge(qtd_links_source, qtd_links_target, by.x = "source", by.y = "target") %>%
mutate(links = count_s + count_t) %>%
select(-count_s, -count_t)
names(qtd_links)[1]
names(qtd_links)[1] = "name"
nodes
merge(nodes, qtd_links, by = "name")
merge(nodes, qtd_links, by = "name") %>% head
nodes = merge(nodes, qtd_links, by = "name")
sort(nodes$links)
nodes[sort(nodes$links),]
nodes[sort(nodes$links),] %>% tail
max(links)
max(nodes$links)
node[nodes$links==210,]
nodes[nodes$links==210,]
links = ga.data
names(links) = c("source", "target")
nodes = data.frame(name = NULL, group = NULL)
for (i in 1:length(wc)) {
nodes = rbind(nodes, data.frame(wc[[i]], rep(i, length(wc[[i]]))))
}
names(nodes) = c("name", "group")
nodes
head(nodes)
mutual_friends_ids_all
mutual_friends_ids_all %>% lapply(len)
mutual_friends_ids_all %>% lapply(length)
do.call("rbind", mutual_friends_ids_all %>% lapply(length))
nodes = data.frame(name = NULL, group = NULL)
for (i in 1:length(wc)) {
nodes = rbind(nodes, data.frame(wc[[i]], rep(i, length(wc[[i]]))))
}
names(nodes) = c("name", "group")
nodes
head(nodes)
head(nodes, 10)
n_mutual_friends = do.call("rbind", mutual_friends_ids_all %>% lapply(length))
friends_df
friends_df[,"name"]
friends_df[,"name", drop = F]
n_mutual_friends
mutual_friends_ids_all
mutual_friends_ids_all[537]
mutual_friends_ids_all[[537]]
mutual_friends_ids_all[[537]] = NULL
n_mutual_friends = do.call("rbind", mutual_friends_ids_all %>% lapply(length))
n_mutual_friends
n_mutual_friends
mutual_friends_ids_all
mutual_friends_ids_all[537] = NULL
mutual_friends_ids_all
mutual_friends_ids_all[537] = ""
n_mutual_friends = do.call("rbind", mutual_friends_ids_all %>% lapply(length))
n_mutual_friends
cbind(n_mutual_friends, friends_df[,"name", drop = F])
cbind(friends_df[,"name", drop = F], n_mutual_friends)
n_mutual_friends = cbind(friends_df[,"name", drop = F], n_mutual_friends)
head(n_mutual_friends)
n_links = do.call("rbind", mutual_friends_ids_all %>% lapply(length))
n_links = cbind(friends_df[,"name", drop = F], n_mutual_friends)
merge(nodes, n_links, by = "name")
head(n_links)
n_links = do.call("rbind", mutual_friends_ids_all %>% lapply(length))
head(n_links)
n_links = cbind(friends_df[,"name", drop = F], n_links)
merge(nodes, n_links, by = "name")
merge(nodes, n_links, by = "name") %>% head
merge(nodes, n_links, by = "name", sort = F)
nodes = merge(nodes, n_links, by = "name", sort = F)
nodes
head(nodes)
links
head(links)
head(nodes)
head(nodest)
names(nodes)[1] = "id"
json_nodes = rjson::toJSON(unname(split(nodes, 1:nrow(nodes))))
json_links = rjson::toJSON(unname(split(links, 1:nrow(links))))
json_nodes
paste0('{\n"nodes": ', json_nodes, ', \n', '"links": ', json_links, "\n}")
cat(paste0('{\n"nodes": ', json_nodes, ', \n', '"links": ', json_links, "\n}"))
write_file(paste0('{\n"nodes": ', json_nodes, ', \n', '"links": ', json_links, "\n}"),
temp.json)
write_file(paste0('{\n"nodes": ', json_nodes, ', \n', '"links": ', json_links, "\n}"),
"temp.json")
head(nodes)
remDr$open()
library(RSelenium)
library(rvest)
fb_profile <- function(id) {
return(paste0("http://www.facebook.com/profile.php?id=", id))
}
fb_mutual_friends_page <- function(string, type = "username") {
if (type == "username") {
return(paste0("https://www.facebook.com/", string, "/friends_mutual"))
}
if (type == "id") {
return(paste0("https://www.facebook.com/profile.php?id=", string, "&sk=friends_mutual&pnref=lhc"))
} else {
print("Choose a valid type")
return(NULL)
}
}
remDr <- remoteDriver(remoteServerAddr = "192.168.99.100", port = 4445L, browserName = "firefox")
remDr$open()
remDr <- remoteDriver(remoteServerAddr = "192.168.99.100", port = 4445L, browserName = "firefox")
remDr$open()
remDr$setTimeout(type = "page load", milliseconds = 99999999999)
friends_names
friends
sapply(friends, function(x) return(sub(".*facebook\\.com/([A-Za-z0-9\\.]*)\\?fref.*", "\\1", x)))
remDr$navigate("http://www.facebook.com")
## log in
login = "joelcerqueiraponte@gmail.com" # PUT LOGIN HERE
password = "ninjanavio222" # PUT PASSWORD HERE
## go to password field and fill
txtfield <- remDr$findElement(using = 'css selector', "#email")
txtfield$sendKeysToElement(list(login))
## go to password field and fill
txtfield <- remDr$findElement(using = 'css selector', "#email")
txtfield$sendKeysToElement(list(login))
## go to your profile page
wxbutton <- remDr$findElement(using = 'css selector', "#userNav .noCount")
wxbutton$clickElement()
remDr <- remoteDriver(remoteServerAddr = "192.168.99.100", port = 4445L, browserName = "firefox")
remDr$open()
remDr$setTimeout(type = "page load", milliseconds = 99999999999)
remDr$navigate("http://www.facebook.com")
## log in
login = "joelcerqueiraponte@gmail.com" # PUT LOGIN HERE
## go to password field and fill
txtfield <- remDr$findElement(using = 'css selector', "#email")
password = "ninjanavio222" # PUT PASSWORD HERE
txtfield$sendKeysToElement(list(login))
## go to password field and fill
txtfield <- remDr$findElement(using = 'css selector', "#pass")
txtfield$sendKeysToElement(list(password))
## click to log in
wxbutton <- remDr$findElement(using = 'css selector', "#u_0_2")
wxbutton$clickElement()
## go to your profile page
wxbutton <- remDr$findElement(using = 'css selector', "#userNav .noCount")
wxbutton$clickElement()
## go to your friends page
wxbutton <- remDr$findElement(using = 'css selector', '#fbTimelineHeadline [data-tab-key="friends"]')
wxbutton$clickElement()
#get number of friends
page = read_html(remDr$getPageSource()[[1]])
n_friends = html_nodes(page, "._3d0") %>% html_text
n_friends = as.numeric(n_friends[1])
friends = 1
# scroll down page down to the bottom
while(length(friends) < n_friends) {
webElem <- remDr$findElement("css", "body")
webElem$sendKeysToElement(list(key = "end"))
#get number of friends shown now
page = read_html(remDr$getPageSource()[[1]])
friends = html_nodes(page, ".fcb a")
#collected friends should be increasing
print(paste0("collected friends: ", length(friends), " < total friends: ", n_friends))
}
# select only friends (the css selector gets other elements once all friends are found)
friends = friends[1:n_friends]
remDr$navigate("http://www.facebook.com")
## go to your profile page
wxbutton <- remDr$findElement(using = 'css selector', "#userNav .noCount")
wxbutton$clickElement()
friends_df
View(friends_df)
remDr$navigate("http://www.facebook.com")
#get number of friends
page = read_html(remDr$getPageSource()[[1]])
page
page[1]
page[2]
page
## go to your profile page
wxbutton <- remDr$findElement(using = 'css selector', "#userNav .noCount")
wxbutton$clickElement()
wxbutton
remDr$screenshot(display = T)
## click to log in
wxbutton <- remDr$findElement(using = 'css selector', "#u_0_2")
wxbutton$clickElement()
## go to your profile page
wxbutton <- remDr$findElement(using = 'css selector', "#userNav .noCount")
wxbutton$clickElement()
RSelenium::getFirefoxProfile()
remDr$sendKeysToAlert("{ESC}")
remDr$sendKeysToAlert(list(key = "end"))
remDr$sendKeysToAlert(list(key = "esc"))
?remDr$sendKeysToAlert
remDr$getAlertText()
remDr$screenshot(display = T)
remDr$sendKeysToActiveElement(list(key = "eac"))
remDr$sendKeysToActiveElement(list(key = "esc"))
?makeFirefoxProfile()
RSelenium::getFirefoxProfile()
?getFirefoxProfile()
remDr <- remoteDriver(remoteServerAddr = "192.168.99.100", port = 4445L, browserName = "chrome")
remDr$open()
remDr <- remoteDriver(remoteServerAddr = "192.168.99.100", port = 4445L, browserName = "firefox")
remDr$open()
remDr$setTimeout(type = "page load", milliseconds = 99999999999)
remDr$navigate("http://www.facebook.com")
## log in
login = "joelcerqueiraponte@gmail.com" # PUT LOGIN HERE
password = "ninjanavio222" # PUT PASSWORD HERE
remDr$screenshot(display = T)
## go to password field and fill
txtfield <- remDr$findElement(using = 'css selector', "#email")
txtfield$sendKeysToElement(list(login))
remDr$screenshot(display = T)
## go to password field and fill
txtfield <- remDr$findElement(using = 'css selector', "#pass")
txtfield$sendKeysToElement(list(password))
## click to log in
wxbutton <- remDr$findElement(using = 'css selector', "#u_0_2")
wxbutton$clickElement()
txtfield$sendKeysToElement(list(password))
## go to password field and fill
txtfield <- remDr$findElement(using = 'css selector', "#pass")
txtfield$sendKeysToElement(list(password))
## click to log in
wxbutton <- remDr$findElement(using = 'css selector', "#u_0_2")
wxbutton$clickElement()
## click to log in
wxbutton <- remDr$findElement(using = 'css selector', "#u_0_2")
wxbutton$clickElement()
remDr$screenshot(display = T)
## click to log in
wxbutton <- remDr$findElement(using = 'css selector', "#u_0_2")
wxbutton$clickElement()
wxbutton$clickElement()
remDr$setTimeout(type = "page load", milliseconds = 99999999999)
remDr$navigate("http://www.facebook.com")
## log in
login = "joelcerqueiraponte@gmail.com" # PUT LOGIN HERE
password = "ninjanavio222" # PUT PASSWORD HERE
## go to password field and fill
txtfield <- remDr$findElement(using = 'css selector', "#email")
txtfield$sendKeysToElement(list(login))
## go to password field and fill
txtfield <- remDr$findElement(using = 'css selector', "#pass")
txtfield$sendKeysToElement(list(password))
## click to log in
wxbutton <- remDr$findElement(using = 'css selector', "#u_0_2")
wxbutton$clickElement()
remDr$screenshot(display = T)
View(friends_df)
mutual_friends_ids_all
mutual_friends_ids_all %>% head
?label.propagation.community
g
friends_links
wc
wc
friends_links
ga.data
head(links)
heads(nodes)
ga.data
head(ga.data)
